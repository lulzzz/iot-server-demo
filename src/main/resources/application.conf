main {

  appName = "IotServerDemo"
  appName = ${?APP_NAME}

  role = "seed,streamer,api,ingest"
  role = ${?ROLE}

  # use to override config array in Main.scala
  akkaSeed0 = "akka.tcp://IotServerDemo@127.0.0.1:2551"
  akkaSeed0 = ${?AKKA_SEED0}

  akkaSeed1 = "akka.tcp://IotServerDemo@127.0.0.1:2551"
  akkaSeed1 = ${?AKKA_SEED1}

  logLevel = "debug"
  logLevel = ${?LOG_LEVEL}

  path = iot
  path = ${?URL_PATH}

  apiPort = 8080
  apiPort = ${?API_PORT}

  ingestPort = 8081
  ingestPort = ${?INGEST_PORT}

  maxWindows = 20000
  maxWindows = ${?MAX_WINDOWS}

  corsOrigin = [
    "https://MY_DOMAIN.com"
    "http://localhost:8080"
  ]

  fleetServiceShards = 2
  locationServiceShards = 4
  deviceServiceShards = 12

  snapShotInterval = 100
  snapShotInterval = ${?SNAP_SHOT_INTERVAL}

  devicePersistenceId = "devicePersistenceId"
  devicePersistenceId = ${?DEVICE_PERSISTENCE_ID}

  locationPersistenceId = "locationPersistenceId"
  locationPersistenceId = ${?LOCATION_PERSISTENCE_ID}

  fleetPersistenceId = "fleetPersistenceId"
  fleetPersistenceId = ${?FLEET_PERSISTENCE_ID}

}

akka {

  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = ${?AKKA_LOG_LEVEL}
  loglevel = "INFO"

  actor {

    provider = cluster

    serializers {
      setDeviceAssessment = "onextent.iot.server.demo.models.functions.AvroSupport$SetDeviceAssessmentSerializer"
      deviceAssessmentAck = "onextent.iot.server.demo.models.functions.AvroSupport$DeviceAssessmentAckSerializer"
      getDevice = "onextent.iot.server.demo.models.functions.AvroSupport$GetDeviceSerializer"
      createDevice = "onextent.iot.server.demo.models.functions.AvroSupport$CreateDeviceSerializer"
      getDeviceAssessments = "onextent.iot.server.demo.models.functions.AvroSupport$GetDeviceAssessmentsSerializer"
      setDeviceAssessment = "onextent.iot.server.demo.models.functions.AvroSupport$SetDeviceAssessmentSerializer"
      deviceAlreadyExists = "onextent.iot.server.demo.models.functions.AvroSupport$DeviceAlreadyExistsSerializer"
      device = "onextent.iot.server.demo.models.functions.AvroSupport$DeviceSerializer"
      assessment = "onextent.iot.server.demo.models.functions.AvroSupport$AssessmentSerializer"

      getLocation = "onextent.iot.server.demo.models.functions.AvroSupport$GetLocationSerializer"
      getLocationDevices = "onextent.iot.server.demo.models.functions.AvroSupport$GetLocationDevicesSerializer"
      getLocationAssessments = "onextent.iot.server.demo.models.functions.AvroSupport$GetLocationAssessmentsSerializer"
      setLocationAssessment = "onextent.iot.server.demo.models.functions.AvroSupport$SetLocationAssessmentSerializer"
      createLocation = "onextent.iot.server.demo.models.functions.AvroSupport$CreateLocationSerializer"
      locationAlreadyExists = "onextent.iot.server.demo.models.functions.AvroSupport$LocationAlreadyExistsSerializer"
      addDeviceToLocation = "onextent.iot.server.demo.models.functions.AvroSupport$AddDeviceToLocationSerializer"
      locationAssessmentAck = "onextent.iot.server.demo.models.functions.AvroSupport$LocationAssessmentAckSerializer"
      location = "onextent.iot.server.demo.models.functions.AvroSupport$LocationSerializer"

      setFleetAssessment = "onextent.iot.server.demo.models.functions.AvroSupport$SetFleetAssessmentSerializer"
      getFleet = "onextent.iot.server.demo.models.functions.AvroSupport$GetFleetSerializer"
      getFleetLocations = "onextent.iot.server.demo.models.functions.AvroSupport$GetFleetLocationsSerializer"
      addLocationToFleet = "onextent.iot.server.demo.models.functions.AvroSupport$AddLocationToFleetSerializer"
      getFleetFleets = "onextent.iot.server.demo.models.functions.AvroSupport$GetFleetFleetsSerializer"
      addFleetToFleet = "onextent.iot.server.demo.models.functions.AvroSupport$AddFleetToFleetSerializer"
      getFleetAssessments = "onextent.iot.server.demo.models.functions.AvroSupport$GetFleetAssessmentsSerializer"
      createFleet = "onextent.iot.server.demo.models.functions.AvroSupport$CreateFleetSerializer"
      fleetAlreadyExists = "onextent.iot.server.demo.models.functions.AvroSupport$FleetAlreadyExistsSerializer"
      fleetAssessmentAck = "onextent.iot.server.demo.models.functions.AvroSupport$FleetAssessmentAckSerializer"
    }
    serialization-bindings {
      "onextent.iot.server.demo.actors.device.DeviceActor$SetDeviceAssessment" = setDeviceAssessment
      "onextent.iot.server.demo.actors.device.DeviceActor$DeviceAssessmentAck" = deviceAssessmentAck
      "onextent.iot.server.demo.actors.device.DeviceActor$GetDevice" = getDevice
      "onextent.iot.server.demo.actors.device.DeviceActor$CreateDevice" = createDevice
      "onextent.iot.server.demo.actors.device.DeviceActor$GetDeviceAssessments" = getDeviceAssessments
      "onextent.iot.server.demo.actors.device.DeviceActor$SetDeviceAssessment" = setDeviceAssessment
      "onextent.iot.server.demo.actors.device.DeviceActor$DeviceAlreadyExists" = deviceAlreadyExists
      "onextent.iot.server.demo.models.Device" = device
      "onextent.iot.server.demo.models.Assessment" = assessment

      "onextent.iot.server.demo.actors.location.LocationActor$GetLocation" = getLocation
      "onextent.iot.server.demo.actors.location.LocationActor$GetLocationDevices" = getLocationDevices
      "onextent.iot.server.demo.actors.location.LocationActor$GetLocationAssessments" = getLocationAssessments
      "onextent.iot.server.demo.actors.location.LocationActor$SetLocationAssessment" = setLocationAssessment
      "onextent.iot.server.demo.actors.location.LocationActor$CreateLocation" = createLocation
      "onextent.iot.server.demo.actors.location.LocationActor$LocationAlreadyExists" = locationAlreadyExists
      "onextent.iot.server.demo.actors.location.LocationActor$AddDeviceToLocation" = addDeviceToLocation
      "onextent.iot.server.demo.actors.location.LocationActor$LocationAssessmentAck" = locationAssessmentAck
      "onextent.iot.server.demo.models.Location" = location

      "onextent.iot.server.demo.actors.fleet.FleetActor$SetFleetAssessment" = setFleetAssessment
      "onextent.iot.server.demo.actors.fleet.FleetActor$GetFleet" = getFleet
      "onextent.iot.server.demo.actors.fleet.FleetActor$GetFleetLocations" = getFleetLocations
      "onextent.iot.server.demo.actors.fleet.FleetActor$AddLocationToFleet" = addLocationToFleet
      "onextent.iot.server.demo.actors.fleet.FleetActor$GetFleetFleets" = getFleetFleets
      "onextent.iot.server.demo.actors.fleet.FleetActor$GetFleetFleets" = getFleetFleets
      "onextent.iot.server.demo.actors.fleet.FleetActor$AddFleetToFleet" = addFleetToFleet
      "onextent.iot.server.demo.actors.fleet.FleetActor$GetFleetAssessments" = getFleetAssessments
      "onextent.iot.server.demo.actors.fleet.FleetActor$CreateFleet" = createFleet
      "onextent.iot.server.demo.actors.fleet.FleetActor$FleetAlreadyExists" = fleetAlreadyExists
      "onextent.iot.server.demo.actors.fleet.FleetActor$FleetAssessmentAck" = fleetAssessmentAck
    }
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOST_NAME}
      port = 2551
      port = ${?AKKA_PORT}
    }
  }

}

redis {
  host = "localhost"
  host = ${?REDIS_HOST}
  port = 6379
  port = ${?REDIS_PORT}
  # optional
  password = "topsecret"
  password = ${?REDIS_PASSWORD}
  db = 1
  db = ${?REDIS_DB}
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

//akka.persistence.journal.plugin = "akka-persistence-redis.journal"
//akka.persistence.snapshot-store.plugin = "akka-persistence-redis.snapshot"

//akka.persistence.journal.plugin = "akka-contrib-mongodb-persistence-journal"
//akka.persistence.snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"

kafka {

  parallelism = 4
  parallelism = ${?PARALLELISM }

  bootstrap = "localhost:9092"
  bootstrap = ${?BOOTSTRAP}

  consumerGroup = "$Default"
  consumerGroup = ${?CONSUMER_GROUP}

  offsetResetDefault = "latest"
  offsetResetDefault = ${?OFFSET_RESET}

  topics {

    observations = "observations"
    observations = ${?OBSERVATION_TOPIC}

    deviceAssessments = "deviceAssessments"
    deviceAssessments = ${?DEVICE_ASSESSMENTS_TOPIC}

    locationAssessments = "locationAssessments"
    locationAssessments = ${?LOCATION_ASSESSMENTS_TOPIC}

    fleetAssessments = "fleetAssessments"
    fleetAssessments = ${?FLEET_ASSESSMENTS_TOPIC}

  }

}

# Properties for akka.kafka.ConsumerSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.consumer {
  # Tuning property of scheduled polls.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 50ms

  # The stage will be await outstanding offset commit requests before
  # shutting down, but if that takes longer than this timeout it will
  # stop forcefully.
  stop-timeout = 30s

  # How long to wait for `KafkaConsumer.close`
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `TimeoutException`.
  commit-timeout = 15s

  # If the KafkaConsumer can't connect to the broker the poll will be
  # aborted after this timeout. The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException which will be ignored
  # until max-wakeups limit gets exceeded.
  wakeup-timeout = 3s

  # After exceeding maxinum wakeups the kafka will stop and the stage will fail.
  max-wakeups = 10

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.kafka.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    # Disable auto-commit by default
    enable.auto.commit = false
  }
}

cassandra-journal {

  contact-points = [${CASSANDRA_HOST}]

  port = 9042
  port = ${?CASSANDRA_PORT}

  keyspace = "iot_server_demo_jrnl"
  keyspace = ${?JRNL_KEYSPACE}

  authentication.username = "cassandra"
  authentication.username = ${?CASSANDRA_USERNAME}

  authentication.password = "cassandra"
  authentication.password = ${?CASSANDRA_PASSWORD}

  ssl {

  }

}

cassandra-snapshot-store {

  contact-points = [${CASSANDRA_HOST}]

  port = 9042
  port = ${?CASSANDRA_PORT}

  keyspace = "iot_server_demo_snapshot"
  keyspace = ${?SNAPSHOT_KEYSPACE}

  authentication.username = "cassandra"
  authentication.username = ${?CASSANDRA_USERNAME}

  authentication.password = "cassandra"
  authentication.password = ${?CASSANDRA_PASSWORD}

  ssl {

  }

}

// note: "akka_persistence_realtime" and "akka_persistence_metadata" are not controlled here.  todo: reseaerch "suffixed collection names"
akka.contrib.persistence.mongodb.mongo.mongouri = ${?MONGOURI}
akka.contrib.persistence.mongodb.mongo.journal-collection = "iot_server_demo_persistent_journal"
akka.contrib.persistence.mongodb.mongo.journal-index = "iot_server_demo_journal_index"
akka.contrib.persistence.mongodb.mongo.snaps-collection = "iot_server_demo_persistent_snapshots"
akka.contrib.persistence.mongodb.mongo.snaps-index = "iot_server_demo_snaps_index"
akka.contrib.persistence.mongodb.mongo.journal-write-concern = "Acknowledged"
akka.contrib.persistence.mongodb.mongo.journal-wtimeout = 3s
akka.contrib.persistence.mongodb.mongo.journal-fsync = false
akka.contrib.persistence.mongodb.mongo.snaps-wtimeout = 3s
akka.contrib.persistence.mongodb.mongo.snaps-fsync = false

