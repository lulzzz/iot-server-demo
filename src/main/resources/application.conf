main {

  appName = "IotServerDemo"
  appName = ${?APP_NAME}

  role = "seed"
  role = ${?ROLE}

  # use to override config array in Main.scala
  akkaSeed = "akka.tcp://IotServerDemo@127.0.0.1:2551"
  akkaSeed = ${?AKKA_SEED}

  logLevel = "debug"
  logLevel = ${?LOG_LEVEL}

  path = iot
  path = ${?URL_PATH}

  port = 8080
  port = ${?PORT}

  maxWindows = 20000
  maxWindows = ${?MAX_WINDOWS}

  corsOrigin = [
    "https://MY_DOMAIN.com"
    "http://localhost:8080"
  ]

  locationServiceShards = 4
  deviceServiceShards = 12

  snapShotInterval = 100
  snapShotInterval = ${?SNAP_SHOT_INTERVAL}

  devicePersistenceId = "devicePersistenceId"
  devicePersistenceId = ${?DEVICE_PERSISTENCE_ID}

  locationPersistenceId = "locationPersistenceId"
  locationPersistenceId = ${?LOCATION_PERSISTENCE_ID}

  fleetPersistenceId = "fleetPersistenceId"
  fleetPersistenceId = ${?FLEET_PERSISTENCE_ID}

}

//// @see http://doc.akka.io/docs/akka/2.4.10/scala/logging.html
//akka {
//  # Options: OFF, ERROR, WARNING, INFO, DEBUG
//  loglevel = ${?AKKA_LOG_LEVEL}
//  loglevel = "INFO"
//
//  actor.provider = "akka.cluster.ClusterActorRefProvider"
//
//  remote {
//    enabled-transports = ["akka.remote.netty.tcp"]
//    log-remote-lifecycle-events = off
//    netty.tcp {
//      hostname = "127.0.0.1"
//      port = 2552
//      #port = 0
//    }
//  }
//
//  cluster {
//    roles = ["seed"]
//    seed-nodes = [
//      //"akka.tcp://ClusterSystem@127.0.0.1:2551",
//      "akka.tcp://ClusterSystem@127.0.0.1:2552"
//    ]
//  }
//
//}
akka {
  actor {
    provider = cluster
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?POD_IP}
      bind-hostname = "127.0.0.1"
      bind-hostname = ${?POD_NAME}
      port = 2551
      port = ${?AKKA_PORT}
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://IotServerDemo@127.0.0.1:2551"
    ]
    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 10s
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
    }
    snapshot-store {
      plugin = "cassandra-snapshot-store"
    }
  }

}

kafka {

  parallelism = 4
  parallelism = ${?PARALLELISM }

  bootstrap = "localhost:9092"
  bootstrap = ${?BOOTSTRAP}

  consumerGroup = "$Default"
  consumerGroup = ${?CONSUMER_GROUP}

  offsetResetDefault = "latest"
  offsetResetDefault = ${?OFFSET_RESET}

  topics {

    observations = "observations"
    observations = ${?OBSERVATION_TOPIC}

    deviceAssessments = "deviceAssessments"
    deviceAssessments = ${?DEVICE_ASSESSMENTS_TOPIC}

    locationAssessments = "locationAssessments"
    locationAssessments = ${?LOCATION_ASSESSMENTS_TOPIC}

    fleetAssessments = "fleetAssessments"
    fleetAssessments = ${?FLEET_ASSESSMENTS_TOPIC}

  }

}

# Properties for akka.kafka.ConsumerSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.consumer {
  # Tuning property of scheduled polls.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 50ms

  # The stage will be await outstanding offset commit requests before
  # shutting down, but if that takes longer than this timeout it will
  # stop forcefully.
  stop-timeout = 30s

  # How long to wait for `KafkaConsumer.close`
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `TimeoutException`.
  commit-timeout = 15s

  # If the KafkaConsumer can't connect to the broker the poll will be
  # aborted after this timeout. The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException which will be ignored
  # until max-wakeups limit gets exceeded.
  wakeup-timeout = 3s

  # After exceeding maxinum wakeups the kafka will stop and the stage will fail.
  max-wakeups = 10

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.kafka.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    # Disable auto-commit by default
    enable.auto.commit = false
  }
}

cassandra-journal {

  contact-points = ["localhost"]

  port = 9042
  port = ${?CASSANDRA_PORT}

  keyspace = "iot-server-demo_jrnl"
  keyspace = ${?JRNL_KEYSPACE}

  authentication.username = "cassandra"
  authentication.username = ${?CASSANDRA_USERNAME}

  authentication.password = "cassandra"
  authentication.password = ${?CASSANDRA_PASSWORD}

}

cassandra-snapshot-store {

  contact-points = ["localhost"]

  port = 9042
  port = ${?CASSANDRA_PORT}

  keyspace = "iot-server-demo_snapshot"
  keyspace = ${?SNAPSHOT_KEYSPACE}

  authentication.username = "cassandra"
  authentication.username = ${?CASSANDRA_USERNAME}

  authentication.password = "cassandra"
  authentication.password = ${?CASSANDRA_PASSWORD}

}
